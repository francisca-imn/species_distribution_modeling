values_pred <- values(pred_chile, na.rm=TRUE)
# Comparación estadística
ks_test <- ks.test(values_arclim, values_pred)  # Prueba de Kolmogorov-Smirnov
wilcox_test <- wilcox.test(values_arclim, values_pred)  # Prueba de Wilcoxon
# Mostrar resultados
print(ks_test)
print(wilcox_test)
# Visualización de los mapas
plot(arclim_chile, main="Mapa ARClim - Norte de Chile")
plot(pred_chile, main="Mapa Predicción - Norte de Chile")
source("C:/Users/fmnar/OneDrive/Escritorio/cienciambiental/codigo/02_datos_ocurrencia_gbif.R")
# Arreglando datos de entrada ---------------------------------------------
capas_present_raster <- raster::stack(capas_present) # Convertir SpatRaster a RasterStack (para que lo acepte maxent)
capas_future_raster <- raster::stack(capas_future)
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%  # Asegurar que data_ocurrencias_filtered sea un data.frame con solo coordenadas
select(decimalLongitude, decimalLatitude) %>%
as.data.frame()
# 📌 Ejecutar Maxent ------------------------------------------------------
model <- maxent(capas_present_raster, data_ocurrencias_filtered)
pred_present <- predict(model, capas_present_raster)
pred_future <- predict(model, capas_future_raster)
# Valos promedios de ocurrencia -------------------------------------------
prob_present_mean <- cellStats(pred_present, stat = "mean", na.rm = TRUE)
prob_future_mean <- cellStats(pred_future, stat = "mean", na.rm = TRUE)
library(RColorBrewer)
# cargar capas de arclim --------------------------------------------------
zip_path <- "data/arclim_adesmia_atacamensis.zip"  #cambiar por la especie correspondiente
files_in_zip <- unzip(zip_path, list = TRUE) # Listar los archivos dentro del ZIP
tif_files <- files_in_zip$Name[grepl("\\.tif$", files_in_zip$Name)] # Filtrar solo los archivos .tif dentro del ZIP
temp_dir <- tempdir()  # Crear un directorio temporal para extraer los archivos
unzip(zip_path, files = tif_files, exdir = temp_dir)  # Extraer los archivos .tif en la carpeta temporal
rasters <- lapply(tif_files, function(file) {  # Cargar los rasters desde la carpeta temporal
rast(file.path(temp_dir, file))
})
names(rasters) <- c("arclim_present", "arclim_future")  # Ajustar los nombres según corresponda
arclim_present <- rasters[[1]] # Extraer los mapas en variables individuales
arclim_future <- rasters[[2]]
# probabilidades ----------------------------------------------------------
prob_present_mean_arclim <- global(arclim_present, "mean", na.rm = TRUE)
prob_future_mean_arclim <- global(arclim_future, "mean", na.rm = TRUE)
pred_present_spat <- rast(pred_present)  # Convertir pred_present (RasterLayer) a SpatRaster
pred_present_proj <- project(pred_present_spat, arclim_present, method = "bilinear")  # Reproyectar pred_present para que tenga la misma proyección que arclim_present
pred_present_resampled <- resample(pred_present_proj, arclim_present, method = "bilinear")  # Ajustar resolución y extensión para que coincidan con arclim_present
pred_present_resampled <- extend(pred_present_resampled, arclim_present)  # Asegurar que la extensión es exactamente la misma
common_range <- range(values(arclim_present), values(pred_present_resampled), na.rm = TRUE)
pred_future_spat <- rast(pred_future)  # Convertir pred_present (RasterLayer) a SpatRaster
pred_future_proj <- project(pred_future_spat, arclim_future, method = "bilinear")  # Reproyectar pred_present para que tenga la misma proyección que arclim_present
pred_future_resampled <- resample(pred_future_proj, arclim_future, method = "bilinear")  # Ajustar resolución y extensión para que coincidan con arclim_present
pred_future_resampled <- extend(pred_future_resampled, arclim_future)  # Asegurar que la extensión es exactamente la misma
common_range_future <- range(values(arclim_future), values(pred_future_resampled), na.rm = TRUE)
# graficar comparacion arclim-dismo 1980-2010 -----------------------------
my_palette <- colorRampPalette(brewer.pal(9, "YlGnBu"))  # Amarillo - Verde - Azul
par(mfcol = c(1,2))
plot(pred_present_resampled,
main = "Probabilidad de ocurrencia \nMyocastor coypus DISMO 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_present_mean_arclim, 3)), side = 1, line = 3, cex = 0.8)
plot(arclim_present,
main = "Probabilidad ocurrencia \nMyocastor coypus ARCLIM 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_present_mean, 3)), side = 1, line = 3, cex = 0.8)
# grafica comparacion arclim-dismo 2035-2065 ------------------------------
plot(pred_future_resampled,
main = "Probabilidad de ocurrencia \nMyocastor coypus DISMO 2035-2065",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_future_mean_arclim, 3)), side = 1, line = 3, cex = 0.8)
plot(arclim_future,
main = "Probabilidad ocurrencia \nMyocastor coypus ARCLIM 2035-2065",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_future_mean, 3)), side = 1, line = 3, cex = 0.8)
plot(pred_present_resampled,
main = "Probabilidad de ocurrencia \nA. atacamensis DISMO 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_present_mean_arclim, 3)), side = 1, line = 3, cex = 0.8)
plot(arclim_present,
main = "Probabilidad ocurrencia \nA. atacamensis ARCLIM 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_present_mean, 3)), side = 1, line = 3, cex = 0.8)
# grafica comparacion arclim-dismo 2035-2065 ------------------------------
plot(pred_future_resampled,
main = "Probabilidad de ocurrencia \nA. atacamensis DISMO 2035-2065",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_future_mean_arclim, 3)), side = 1, line = 3, cex = 0.8)
plot(arclim_future,
main = "Probabilidad ocurrencia \nA. atacamensis ARCLIM 2035-2065",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_future_mean, 3)), side = 1, line = 3, cex = 0.8)
library(dplyr)
library(terra)
# Obtener índices de presencia en ambos mapas correctamente
presence_arclim <- which(arclim_present[] > 0)
presence_pred <- which(pred_present_resampled[] > 0)
# Convertir índices a coordenadas geográficas
coords_arclim <- xyFromCell(arclim_present, presence_arclim)
coords_pred <- xyFromCell(pred_present_resampled, presence_pred)
# Combinar coordenadas y obtener los valores mínimos y máximos
all_coords <- rbind(coords_arclim, coords_pred)
min_lon <- min(all_coords[,1])
max_lon <- max(all_coords[,1])
min_lat <- min(all_coords[,2])
max_lat <- max(all_coords[,2])
# Definir nueva extensión basada en presencia
chile_extent <- ext(min_lon, max_lon, min_lat, max_lat)
# Recortar los mapas
arclim_chile <- crop(arclim_present, chile_extent)
pred_chile <- crop(pred_present_resampled, chile_extent)
# Asegurar que tienen la misma resolución y extensión
arclim_chile <- resample(arclim_chile, pred_chile, method="bilinear")
# Visualización de los mapas
plot(arclim_chile, main="Mapa ARClim - Norte de Chile")
plot(pred_chile, main="Mapa Predicción - Norte de Chile")
View(chile_extent)
View(coords_arclim)
plot(pred_present_resampled,
main = "Probabilidad de ocurrencia \nA. atacamensis DISMO 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_present_mean_arclim, 3)), side = 1, line = 3, cex = 0.8)
plot(arclim_present,
main = "Probabilidad ocurrencia \nA. atacamensis ARCLIM 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_present_mean, 3)), side = 1, line = 3, cex = 0.8)
# Crear una máscara con presencia en al menos uno de los mapas
mask_layer <- (arclim_chile > 0) | (pred_chile > 0)
# Aplicar la máscara a ambos mapas
arclim_chile_masked <- mask(arclim_chile, mask_layer)
pred_chile_masked <- mask(pred_chile, mask_layer)
# Visualización de los mapas
plot(arclim_chile_masked, main="Mapa ARClim - Norte de Chile")
plot(pred_chile_masked, main="Mapa Predicción - Norte de Chile")
# Obtener índices de presencia en ambos mapas correctamente
presence_arclim <- which(arclim_present[] > 0)
presence_pred <- which(pred_present_resampled[] > 0)
# Convertir índices a coordenadas geográficas
coords_arclim <- xyFromCell(arclim_present, presence_arclim)
coords_pred <- xyFromCell(pred_present_resampled, presence_pred)
# Combinar coordenadas y obtener los valores mínimos y máximos
all_coords <- rbind(coords_arclim, coords_pred)
min_lon <- min(all_coords[,1])
max_lon <- max(all_coords[,1])
min_lat <- min(all_coords[,2])
max_lat <- max(all_coords[,2])
# Definir nueva extensión basada en presencia
norte_chile_extent <- ext(min_lon, max_lon, min_lat, max_lat)
# Recortar los mapas
arclim_norte <- crop(arclim_present, norte_chile_extent)
pred_norte <- crop(pred_present_resampled, norte_chile_extent)
# Crear una máscara binaria donde hay presencia en al menos uno de los mapas
mask_layer <- arclim_norte
mask_layer[] <- ifelse((arclim_norte[] > 0) | (pred_norte[] > 0), 1, NA)
# Aplicar la máscara a ambos mapas
arclim_norte_masked <- mask(arclim_norte, mask_layer)
pred_norte_masked <- mask(pred_norte, mask_layer)
# Visualización de los mapas recortados y enmascarados
plot(arclim_norte_masked, main="Mapa ARClim - Norte de Chile (Recortado y enmascarado)")
plot(pred_norte_masked, main="Mapa Predicción - Norte de Chile (Recortado y enmascarado)")
# Obtener índices de presencia en ambos mapas correctamente
presence_arclim <- which(arclim_present[] > 0)
presence_pred <- which(pred_present_resampled[] > 0)
# Convertir índices a coordenadas geográficas
coords_arclim <- xyFromCell(arclim_present, presence_arclim)
coords_pred <- xyFromCell(pred_present_resampled, presence_pred)
# Combinar coordenadas y obtener los valores mínimos y máximos
all_coords <- rbind(coords_arclim, coords_pred)
min_lon <- min(all_coords[,1])
max_lon <- max(all_coords[,1])
min_lat <- min(all_coords[,2])
max_lat <- max(all_coords[,2])
# Definir nueva extensión basada en presencia
norte_chile_extent <- ext(min_lon, max_lon, min_lat, max_lat)
# Recortar los mapas
arclim_norte <- crop(arclim_present, norte_chile_extent)
pred_norte <- crop(pred_present_resampled, norte_chile_extent)
# Crear una máscara binaria donde hay presencia en al menos uno de los mapas
mask_layer <- arclim_norte
mask_layer[] <- ifelse((arclim_norte[] > 0) | (pred_norte[] > 0), 1, NA)
# Aplicar la máscara a ambos mapas
arclim_norte_masked <- mask(arclim_norte, mask_layer)
pred_norte_masked <- mask(pred_norte, mask_layer)
# Ajustar extensión para que solo se visualicen los píxeles válidos
valid_cells <- which(!is.na(values(arclim_norte_masked)) | !is.na(values(pred_norte_masked)))
valid_coords <- xyFromCell(arclim_norte_masked, valid_cells)
# Redefinir la extensión con base en las celdas válidas
min_lon_valid <- min(valid_coords[,1])
max_lon_valid <- max(valid_coords[,1])
min_lat_valid <- min(valid_coords[,2])
max_lat_valid <- max(valid_coords[,2])
valid_extent <- ext(min_lon_valid, max_lon_valid, min_lat_valid, max_lat_valid)
# Aplicar nuevo recorte para visualizar correctamente
arclim_norte_final <- crop(arclim_norte_masked, valid_extent)
pred_norte_final <- crop(pred_norte_masked, valid_extent)
# Visualización de los mapas recortados y enmascarados correctamente
plot(arclim_norte_final, main="Mapa ARClim - Zonas con Presencia")
plot(pred_norte_final, main="Mapa Predicción - Zonas con Presencia")
# Convertir a valores para análisis estadístico
values_arclim <- values(arclim_norte_final, na.rm=TRUE)
values_pred <- values(pred_norte_final, na.rm=TRUE)
# Comparación estadística
ks_test <- ks.test(values_arclim, values_pred)  # Prueba de Kolmogorov-Smirnov
wilcox_test <- wilcox.test(values_arclim, values_pred)  # Prueba de Wilcoxon
# Mostrar resultados
print(ks_test)
print(wilcox_test)
# Obtener índices de presencia en ambos mapas correctamente
presence_arclim <- which(arclim_present[] > 0)
presence_pred <- which(pred_present_resampled[] > 0)
# Convertir índices a coordenadas geográficas
coords_arclim <- xyFromCell(arclim_present, presence_arclim)
coords_pred <- xyFromCell(pred_present_resampled, presence_pred)
# Combinar coordenadas y obtener los valores mínimos y máximos
all_coords <- rbind(coords_arclim, coords_pred)
min_lon <- min(all_coords[,1])
max_lon <- max(all_coords[,1])
min_lat <- min(all_coords[,2])
max_lat <- max(all_coords[,2])
# Definir nueva extensión basada en presencia
norte_chile_extent <- ext(min_lon, max_lon, min_lat, max_lat)
# Recortar los mapas
arclim_norte <- crop(arclim_present, norte_chile_extent)
pred_norte <- crop(pred_present_resampled, norte_chile_extent)
# Crear una máscara binaria donde hay presencia en al menos uno de los mapas
mask_layer <- arclim_norte
mask_layer[] <- ifelse((arclim_norte[] > 0) | (pred_norte[] > 0), 1, NA)
# Aplicar la máscara a ambos mapas
arclim_norte_masked <- mask(arclim_norte, mask_layer)
pred_norte_masked <- mask(pred_norte, mask_layer)
# Extraer solo los píxeles con valores válidos para redefinir la extensión
valid_cells <- which(!is.na(arclim_norte_masked[]) | !is.na(pred_norte_masked[]))
valid_coords <- xyFromCell(arclim_norte_masked, valid_cells)
# Redefinir la extensión con base en las celdas válidas
valid_extent <- ext(min(valid_coords[,1]), max(valid_coords[,1]),
min(valid_coords[,2]), max(valid_coords[,2]))
# Aplicar nuevo recorte para visualizar correctamente
arclim_norte_final <- crop(arclim_norte_masked, valid_extent)
pred_norte_final <- crop(pred_norte_masked, valid_extent)
# Forzar reescalado de la extensión para graficar correctamente
ext(arclim_norte_final) <- valid_extent
ext(pred_norte_final) <- valid_extent
# Visualización de los mapas recortados y enmascarados correctamente
plot(arclim_norte_final, main="Mapa ARClim - Zonas con Presencia", axes=TRUE)
plot(pred_norte_final, main="Mapa Predicción - Zonas con Presencia", axes=TRUE)
# Obtener índices de presencia en ambos mapas correctamente
presence_arclim <- which(arclim_present[] > 0)
presence_pred <- which(pred_present_resampled[] > 0)
# Convertir índices a coordenadas geográficas
coords_arclim <- xyFromCell(arclim_present, presence_arclim)
coords_pred <- xyFromCell(pred_present_resampled, presence_pred)
# Combinar coordenadas y obtener los valores mínimos y máximos
all_coords <- rbind(coords_arclim, coords_pred)
min_lon <- min(all_coords[,1])
max_lon <- max(all_coords[,1])
min_lat <- min(all_coords[,2])
max_lat <- max(all_coords[,2])
# Definir nueva extensión basada en presencia
norte_chile_extent <- ext(min_lon, max_lon, min_lat, max_lat)
# Recortar los mapas
arclim_norte <- crop(arclim_present, norte_chile_extent)
pred_norte <- crop(pred_present_resampled, norte_chile_extent)
# Crear una máscara binaria donde hay presencia en al menos uno de los mapas
mask_layer <- arclim_norte
mask_layer[] <- ifelse((arclim_norte[] > 0) | (pred_norte[] > 0), 1, NA)
# Aplicar la máscara a ambos mapas
arclim_norte_masked <- mask(arclim_norte, mask_layer, maskvalues=NA)
pred_norte_masked <- mask(pred_norte, mask_layer, maskvalues=NA)
# Eliminar celdas completamente vacías y recortar extensión
arclim_norte_final <- trim(arclim_norte_masked)
pred_norte_final <- trim(pred_norte_masked)
# Visualización de los mapas recortados y enmascarados correctamente
plot(arclim_norte_final, main="Mapa ARClim - Zonas con Presencia", axes=TRUE)
plot(pred_norte_final, main="Mapa Predicción - Zonas con Presencia", axes=TRUE)
# Convertir a valores para análisis estadístico
values_arclim <- values(arclim_norte_final, na.rm=TRUE)
values_pred <- values(pred_norte_final, na.rm=TRUE)
# Comparación estadística
ks_test <- ks.test(values_arclim, values_pred)  # Prueba de Kolmogorov-Smirnov
wilcox_test <- wilcox.test(values_arclim, values_pred)  # Prueba de Wilcoxon
# Mostrar resultados
print(ks_test)
print(wilcox_test)
# Obtener índices de presencia en ambos mapas correctamente
presence_arclim <- which(arclim_present[] > 0)
presence_pred <- which(pred_present_resampled[] > 0)
# Convertir índices a coordenadas geográficas
coords_arclim <- xyFromCell(arclim_present, presence_arclim)
coords_pred <- xyFromCell(pred_present_resampled, presence_pred)
# Combinar coordenadas y obtener los valores mínimos y máximos
all_coords <- rbind(coords_arclim, coords_pred)
min_lon <- min(all_coords[,1])
max_lon <- max(all_coords[,1])
min_lat <- min(all_coords[,2])
max_lat <- max(all_coords[,2])
# Definir nueva extensión basada en presencia
norte_chile_extent <- ext(min_lon, max_lon, min_lat, max_lat)
# Recortar los mapas
arclim_norte <- crop(arclim_present, norte_chile_extent)
pred_norte <- crop(pred_present_resampled, norte_chile_extent)
# Crear una máscara binaria donde hay presencia en al menos uno de los mapas
mask_layer <- arclim_norte
mask_layer[] <- ifelse((arclim_norte[] > 0) | (pred_norte[] > 0), 1, NA)
# Aplicar la máscara a ambos mapas
arclim_norte_masked <- mask(arclim_norte, mask_layer, maskvalues=NA)
pred_norte_masked <- mask(pred_norte, mask_layer, maskvalues=NA)
# Eliminar celdas completamente vacías y recortar extensión
arclim_norte_final <- trim(arclim_norte_masked)
pred_norte_final <- trim(pred_norte_masked)
# Visualización de los mapas recortados y enmascarados correctamente
plot(arclim_norte_final, main="Mapa ARClim - Zonas con Presencia", axes=TRUE)
plot(pred_norte_final, main="Mapa Predicción - Zonas con Presencia", axes=TRUE)
# Convertir a valores para análisis estadístico
values_arclim <- values(arclim_norte_final, na.rm=TRUE)
values_pred <- values(pred_norte_final, na.rm=TRUE)
# Comparación estadística
ks_test <- ks.test(values_arclim, values_pred)  # Prueba de Kolmogorov-Smirnov
wilcox_test <- wilcox.test(values_arclim, values_pred)  # Prueba de Wilcoxon
# Mostrar resultados
print(ks_test)
# Transformar los mapas a binario con umbral de 0.1
arclim_binary <- arclim_present >= 0.1
pred_binary <- pred_present_resampled >= 0.1
# Visualización de los mapas binarios
plot(arclim_binary, main="Mapa Binario ARClim")
plot(pred_binary, main="Mapa Binario Predicción")
# Encontrar los píxeles con valor 1 en cada mapa
arclim_cells <- which(arclim_binary[] == 1)
pred_cells <- which(pred_binary[] == 1)
# Obtener coordenadas de los píxeles con valor 1
coords_arclim <- xyFromCell(arclim_binary, arclim_cells)
coords_pred <- xyFromCell(pred_binary, pred_cells)
# Encontrar los extremos de CADA MAPA
extremes_arclim <- list(
norte = coords_arclim[which.max(coords_arclim[,2]),],
sur = coords_arclim[which.min(coords_arclim[,2]),],
este = coords_arclim[which.max(coords_arclim[,1]),],
oeste = coords_arclim[which.min(coords_arclim[,1]),]
)
extremes_pred <- list(
norte = coords_pred[which.max(coords_pred[,2]),],
sur = coords_pred[which.min(coords_pred[,2]),],
este = coords_pred[which.max(coords_pred[,1]),],
oeste = coords_pred[which.min(coords_pred[,1]),]
)
# Imprimir resultados
print("Extremos ARClim:")
print(extremes_arclim)
print("Extremos Predicción:")
print(extremes_pred)
# Visualización de los mapas binarios
plot(arclim_binary, main="Mapa Binario ARClim")
plot(pred_binary, main="Mapa Binario Predicción")
# Transformar los mapas a binario con umbral de 0.1
arclim_binary <- arclim_present >= 0.1
pred_binary <- pred_present_resampled >= 0.1
# Encontrar los píxeles con valor 1 en cada mapa
arclim_cells <- which(arclim_binary[] == 1)
pred_cells <- which(pred_binary[] == 1)
# Obtener coordenadas de los píxeles con valor 1
coords_arclim <- xyFromCell(arclim_binary, arclim_cells)
coords_pred <- xyFromCell(pred_binary, pred_cells)
# Encontrar los extremos de CADA MAPA
extremes_arclim <- list(
norte = coords_arclim[which.max(coords_arclim[,2]),],
sur = coords_arclim[which.min(coords_arclim[,2]),],
este = coords_arclim[which.max(coords_arclim[,1]),],
oeste = coords_arclim[which.min(coords_arclim[,1]),]
)
extremes_pred <- list(
norte = coords_pred[which.max(coords_pred[,2]),],
sur = coords_pred[which.min(coords_pred[,2]),],
este = coords_pred[which.max(coords_pred[,1]),],
oeste = coords_pred[which.min(coords_pred[,1]),]
)
# Seleccionar la coordenada extrema global
extreme_global <- list(
norte = if (extremes_arclim$norte[2] > extremes_pred$norte[2]) extremes_arclim$norte else extremes_pred$norte,
sur = if (extremes_arclim$sur[2] < extremes_pred$sur[2]) extremes_arclim$sur else extremes_pred$sur,
este = if (extremes_arclim$este[1] > extremes_pred$este[1]) extremes_arclim$este else extremes_pred$este,
oeste = if (extremes_arclim$oeste[1] < extremes_pred$oeste[1]) extremes_arclim$oeste else extremes_pred$oeste
)
# Imprimir resultados
print("Extremos ARClim:")
print(extremes_arclim)
print("Extremos Predicción:")
print(extremes_pred)
print("Extremos Globales (máximos entre ambos mapas):")
print(extreme_global)
# Visualización de los mapas binarios
plot(arclim_binary, main="Mapa Binario ARClim")
plot(pred_binary, main="Mapa Binario Predicción")
# Cargar los mapas de distribución
arclim_present <- rast("ruta/a/arclim_present.tif")
pred_present_resampled <- rast("ruta/a/pred_present_resampled.tif")
# Transformar los mapas a binario con umbral de 0.1
arclim_binary <- arclim_present >= 0.1
pred_binary <- pred_present_resampled >= 0.1
# Encontrar los píxeles con valor 1 en cada mapa
arclim_cells <- which(arclim_binary[] == 1)
pred_cells <- which(pred_binary[] == 1)
# Obtener coordenadas de los píxeles con valor 1
coords_arclim <- xyFromCell(arclim_binary, arclim_cells)
coords_pred <- xyFromCell(pred_binary, pred_cells)
# Encontrar los extremos de CADA MAPA
extremes_arclim <- list(
norte = coords_arclim[which.max(coords_arclim[,2]),],
sur = coords_arclim[which.min(coords_arclim[,2]),],
este = coords_arclim[which.max(coords_arclim[,1]),],
oeste = coords_arclim[which.min(coords_arclim[,1]),]
)
extremes_pred <- list(
norte = coords_pred[which.max(coords_pred[,2]),],
sur = coords_pred[which.min(coords_pred[,2]),],
este = coords_pred[which.max(coords_pred[,1]),],
oeste = coords_pred[which.min(coords_pred[,1]),]
)
# Seleccionar la coordenada extrema global
extreme_global <- list(
norte = if (extremes_arclim$norte[2] > extremes_pred$norte[2]) extremes_arclim$norte else extremes_pred$norte,
sur = if (extremes_arclim$sur[2] < extremes_pred$sur[2]) extremes_arclim$sur else extremes_pred$sur,
este = if (extremes_arclim$este[1] > extremes_pred$este[1]) extremes_arclim$este else extremes_pred$este,
oeste = if (extremes_arclim$oeste[1] < extremes_pred$oeste[1]) extremes_arclim$oeste else extremes_pred$oeste
)
# Definir los vértices del cuadrado
cuadrado_coords <- rbind(
c(extreme_global$oeste[1], extreme_global$norte[2]), # Esquina superior izquierda
c(extreme_global$este[1], extreme_global$norte[2]),  # Esquina superior derecha
c(extreme_global$este[1], extreme_global$sur[2]),    # Esquina inferior derecha
c(extreme_global$oeste[1], extreme_global$sur[2]),   # Esquina inferior izquierda
c(extreme_global$oeste[1], extreme_global$norte[2])  # Cerrar el cuadrado
)
# Imprimir resultados
print("Extremos Globales (máximos entre ambos mapas):")
print(extreme_global)
print("Coordenadas del Cuadrado de Extremos:")
print(cuadrado_coords)
# Guardar los mapas binarios si es necesario
writeRaster(arclim_binary, "arclim_binary.tif", overwrite=TRUE)
# Visualización de los mapas binarios
plot(arclim_binary, main="Mapa Binario ARClim")
plot(pred_binary, main="Mapa Binario Predicción")
# Dibujar el cuadrado en el mapa
lines(cuadrado_coords[,1], cuadrado_coords[,2], col="red", lwd=2)
# Transformar los mapas a binario con umbral de 0.1
arclim_binary <- arclim_present >= 0.1
pred_binary <- pred_present_resampled >= 0.1
# Encontrar los píxeles con valor 1 en cada mapa
arclim_cells <- which(arclim_binary[] == 1)
pred_cells <- which(pred_binary[] == 1)
# Obtener coordenadas de los píxeles con valor 1
coords_arclim <- xyFromCell(arclim_binary, arclim_cells)
coords_pred <- xyFromCell(pred_binary, pred_cells)
# Encontrar los extremos de CADA MAPA
extremes_arclim <- list(
norte = coords_arclim[which.max(coords_arclim[,2]),],
sur = coords_arclim[which.min(coords_arclim[,2]),],
este = coords_arclim[which.max(coords_arclim[,1]),],
oeste = coords_arclim[which.min(coords_arclim[,1]),]
)
extremes_pred <- list(
norte = coords_pred[which.max(coords_pred[,2]),],
sur = coords_pred[which.min(coords_pred[,2]),],
este = coords_pred[which.max(coords_pred[,1]),],
oeste = coords_pred[which.min(coords_pred[,1]),]
)
# Seleccionar la coordenada extrema global
extreme_global <- list(
norte = if (extremes_arclim$norte[2] > extremes_pred$norte[2]) extremes_arclim$norte else extremes_pred$norte,
sur = if (extremes_arclim$sur[2] < extremes_pred$sur[2]) extremes_arclim$sur else extremes_pred$sur,
este = if (extremes_arclim$este[1] > extremes_pred$este[1]) extremes_arclim$este else extremes_pred$este,
oeste = if (extremes_arclim$oeste[1] < extremes_pred$oeste[1]) extremes_arclim$oeste else extremes_pred$oeste
)
# Definir la extensión del recorte basado en el cuadrado rojo
recorte_extent <- ext(extreme_global$oeste[1], extreme_global$este[1], extreme_global$sur[2], extreme_global$norte[2])
# Recortar ambos mapas al cuadrado definido
arclim_recortado <- crop(arclim_binary, recorte_extent)
pred_recortado <- crop(pred_binary, recorte_extent)
# Guardar los mapas recortados como archivos .tif
writeRaster(arclim_recortado, "arclim_recortado.tif", overwrite=TRUE)
# Imprimir resultados
print("Extremos Globales (máximos entre ambos mapas):")
print(extreme_global)
print("Archivos .tif generados: arclim_recortado.tif y pred_recortado.tif")
# Visualización de los mapas binarios recortados
plot(arclim_recortado, main="Mapa ARClim Recortado")
plot(pred_recortado, main="Mapa Predicción Recortado")
