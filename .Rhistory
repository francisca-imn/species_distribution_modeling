cor_present <- cor(values_present_dismo, values_present_arclim, use = "complete.obs")
# Mostrar resultados
print(paste("Correlación DISMO vs ARCLIM (1980-2010):", round(cor_present, 3)))
print(paste("Correlación DISMO vs ARCLIM (2035-2065):", round(cor_future, 3)))
# Matriz confusion future -------------------------------------------------
# 1. Binarizar los mapas usando un umbral de 0.5 (ajústalo si es necesario)
pred_future_bin <- pred_future_resampled > 0.5
arclim_future_bin <- arclim_future > 0.5
# 2. Convertir los mapas binarizados a vectores
pred_values <- values(pred_future_bin)
arclim_values <- values(arclim_future_bin)
# 3. Remover valores NA para evitar problemas en la comparación
valid_indices <- !is.na(pred_values) & !is.na(arclim_values)
pred_values <- pred_values[valid_indices]
arclim_values <- arclim_values[valid_indices]
# 4. Crear la tabla cruzada (Matriz de Confusión)
confusion_matrix <- table(pred_values, arclim_values)
# Mostrar la matriz de confusión
print(confusion_matrix)
# 5. Calcular el índice de Kappa usando caret
conf_matrix <- confusionMatrix(confusion_matrix)
# Mostrar el índice de Kappa
print(conf_matrix$overall["Kappa"])
# 📌 1. Binarizar los mapas presentes
pred_present_bin <- pred_present_resampled > 0.5
arclim_present_bin <- arclim_present > 0.5
# 📌 2. Convertir los mapas binarizados a vectores
pred_present_values <- values(pred_present_bin)
arclim_present_values <- values(arclim_present_bin)
# 📌 3. Remover valores NA para evitar problemas en la comparación
valid_indices_present <- !is.na(pred_present_values) & !is.na(arclim_present_values)
pred_present_values <- pred_present_values[valid_indices_present]
arclim_present_values <- arclim_present_values[valid_indices_present]
# 📌 4. Crear la tabla cruzada (Matriz de Confusión)
confusion_matrix_present <- table(pred_present_values, arclim_present_values)
# 📌 5. Calcular el índice de Kappa usando caret
conf_matrix_present <- confusionMatrix(confusion_matrix_present)
# 📌 6. Mostrar resultados
print(confusion_matrix_present)
print(conf_matrix_present$overall["Kappa"])
par(mfcol = c(1,2))
hist(values(diff_present), breaks = 50, main = "Diferencia DISMO - ARCLIM \n(1980-2010)",
xlab = "Diferencia de probabilidad", col = "blue")
hist(values(diff_future), breaks = 50, main = "Diferencia DISMO - ARCLIM \n(1980-2010)",
xlab = "Diferencia de probabilidad", col = "blue")
vect_data_future <- vect(geojson_file_future)  # Cargar los datos como un objeto SpatVector
library(httr)
library(terra)
library(sf)
library(dismo)
library(jsonlite)
# 📌 Variables actuales (presente) -------------------------------------------
url_base <- "https://arclim.mma.gob.cl/api/datos"  # URL base de la API ARClim
variables <- c("eto_mean", "pr_sum", "rsds_mean", "tasmin_mean", "tasmax_mean")  # Lista de variables climáticas a descargar
raster_list_present <- list()  # Crear una lista vacía para almacenar los rasters
for (var in variables) {  # Descargar y procesar cada variable climática
atributos_present <- paste0("$CLIMA$", var, "$annual$present")  # Construir la URL con el nombre de la variable
url_present <- paste0(url_base, "/arclim_raster_5km/geojson/?attributes=", URLencode(atributos_present))
response_present <- GET(url_present)  # Realizar la consulta a la API
if (status_code(response_present) == 200) {  # Verificar si la respuesta fue exitosa
geojson_file_present <- tempfile(fileext = ".geojson")  # Guardar datos descargados como archivo temporal
writeBin(content(response_present, "raw"), geojson_file_present)
vect_data_present <- vect(geojson_file_present)  # Cargar los datos como un objeto SpatVector
raster_data_present <- rast(vect_data_present, resolution = 0.05)  # Crear un raster con la misma resolución para todas las capas
raster_data_present <- rasterize(vect_data_present, raster_data_present, field = atributos_present)  # Usa la variable correcta
raster_list_present[[var]] <- raster_data_present
} else {
print(paste("❌ Error al descargar", var, "- Código:", status_code(response_present)))  # ✅ Error corregido
}
}
capas_present <- rast(raster_list_present) # Combinar todas las capas en un solo objeto SpatRaster
print(capas_present)
plot(capas_present)
# 📌 Variables tiempo futuro ----------------------------------------------
# 📌 Variables futuras (proyecciones) -------------------------------------------
url_base <- "https://arclim.mma.gob.cl/api/datos"  # URL base de la API ARClim
variables <- c("eto_mean", "pr_sum", "rsds_mean", "tasmin_mean", "tasmax_mean")  # Lista de variables climáticas a descargar
raster_list_future <- list()  # Crear una lista vacía para almacenar los rasters
for (var in variables) {  # Descargar y procesar cada variable climática futura
atributos_future <- paste0("$CLIMA$", var, "$annual$future")  # ✅ CORREGIDO: "futuro" en lugar de "future"
url_future <- paste0(url_base, "/arclim_raster_5km/geojson/?attributes=", URLencode(atributos_future))
response_future <- GET(url_future)  # Realizar la consulta a la API
if (status_code(response_future) == 200) {  # Verificar si la respuesta fue exitosa
geojson_file_future <- tempfile(fileext = ".geojson")  # Guardar datos descargados como archivo temporal
writeBin(content(response_future, "raw"), geojson_file_future)
vect_data_future <- vect(geojson_file_future)  # Cargar los datos como un objeto SpatVector
raster_data_future <- rast(vect_data_future, resolution = 0.05)  # Crear un raster con la misma resolución para todas las capas
raster_data_future <- rasterize(vect_data_future, raster_data_future, field = atributos_future)  # Usa la variable correcta
raster_list_future[[var]] <- raster_data_future  # ✅ Guardar raster correctamente en la lista
} else {
print(paste("❌ Error al descargar", var, "- Código:", status_code(response_future)))  # ✅ CORREGIDO: error de sintaxis
}
}
# 📌 Combinar todas las capas en un solo objeto SpatRaster
capas_future <- rast(raster_list_future)
# 📊 Mostrar información del stack futuro
print(capas_future)
plot(capas_future)  # ✅ Graficar correctamente las capas
library(rgbif)
library(tidyverse)
library(httr)
library(jsonlite)
library(rnaturalearth)
library(rnaturalearthdata)
library(sf)
library(rJava)
# Obteniendo data de GBIF -------------------------------------------------
especie_info <- name_backbone(name = "Adesmia atacamensis")  #cambiar el nombre por el de la especie de interés
especie_data <- occ_search(taxonKey = especie_info$usageKey,
country = "CL",                    #solo datos de Chile
hasCoordinate = TRUE,              #solo registros con coordenadas
hasGeospatialIssue = FALSE,
limit = 5000)        #sin problemas espaciales
data_ocurrencias <- especie_data$data
# en base a observaciones -------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias %>%
filter(basisOfRecord %in% c("HUMAN_OBSERVATION", "MACHINE_OBSERVATION"))
# Eliminar datos de iNaturalist.org ---------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
filter(publishingOrgKey != "28eb1a3f-1c15-4a95-931a-4af90ecb574d")  #esto es equivalente a references, reemplazar por los códigos que no son fuentes confiables
# en base a observaciones -------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias %>%
filter(basisOfRecord %in% c("HUMAN_OBSERVATION", "MACHINE_OBSERVATION"))
# Precisión espacial adecuada ---------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
filter(coordinateUncertaintyInMeters <= 1000 | is.na(coordinateUncertaintyInMeters))  # Incertidumbre < 1 km
# cautiverio o zoo --------------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
filter(!grepl("zoo|captive|rescue", locality, ignore.case = TRUE))
# calidad taxonómica ------------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
filter(taxonRank == "SPECIES", taxonomicStatus == "ACCEPTED")
# evitar duplicados -------------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
distinct(decimalLongitude, decimalLatitude, year, .keep_all = TRUE)
# 📊 Resultados y visualización -------------------------------------------
print(paste("Registros originales:", nrow(data_ocurrencias)))
print(paste("Registros filtrados:", nrow(data_ocurrencias_filtered)))
glimpse(data_ocurrencias_filtered)
# 📌 Mantener solo las columnas de coordenadas ----------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
select(decimalLongitude, decimalLatitude)
library(terra)
library(sp)
library(dismo)
library(tidyverse)
library(rJava)
library(raster)
# Arreglando datos de entrada ---------------------------------------------
capas_present_raster <- raster::stack(capas_present) # Convertir SpatRaster a RasterStack (para que lo acepte maxent)
capas_future_raster <- raster::stack(capas_future)
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%  # Asegurar que data_ocurrencias_filtered sea un data.frame con solo coordenadas
select(decimalLongitude, decimalLatitude) %>%
as.data.frame()
# 📌 Ejecutar Maxent ------------------------------------------------------
model <- maxent(capas_present_raster, data_ocurrencias_filtered)
par(mfcol = c(1, 2))  # 1 fila, 2 columnas, para graficar
pred_present <- predict(model, capas_present_raster)
pred_future <- predict(model, capas_future_raster)
# Valos promedios de ocurrencia -------------------------------------------
prob_present_mean <- cellStats(pred_present, stat = "mean", na.rm = TRUE)
prob_future_mean <- cellStats(pred_future, stat = "mean", na.rm = TRUE)
library(terra)
library(RColorBrewer)
# cargar capas de arclim --------------------------------------------------
zip_path <- "data/arclim_adesmia_atacamensis.zip"  #cambiar por la especie correspondiente
files_in_zip <- unzip(zip_path, list = TRUE) # Listar los archivos dentro del ZIP
tif_files <- files_in_zip$Name[grepl("\\.tif$", files_in_zip$Name)] # Filtrar solo los archivos .tif dentro del ZIP
temp_dir <- tempdir()  # Crear un directorio temporal para extraer los archivos
unzip(zip_path, files = tif_files, exdir = temp_dir)  # Extraer los archivos .tif en la carpeta temporal
rasters <- lapply(tif_files, function(file) {  # Cargar los rasters desde la carpeta temporal
rast(file.path(temp_dir, file))
})
names(rasters) <- c("arclim_present", "arclim_future")  # Ajustar los nombres según corresponda
arclim_present <- rasters[[1]] # Extraer los mapas en variables individuales
arclim_future <- rasters[[2]]
# probabilidades ----------------------------------------------------------
prob_present_mean_arclim <- global(arclim_present, "mean", na.rm = TRUE)
prob_future_mean_arclim <- global(arclim_future, "mean", na.rm = TRUE)
pred_present_spat <- rast(pred_present)  # Convertir pred_present (RasterLayer) a SpatRaster
pred_present_proj <- project(pred_present_spat, arclim_present, method = "bilinear")  # Reproyectar pred_present para que tenga la misma proyección que arclim_present
pred_present_resampled <- resample(pred_present_proj, arclim_present, method = "bilinear")  # Ajustar resolución y extensión para que coincidan con arclim_present
pred_present_resampled <- extend(pred_present_resampled, arclim_present)  # Asegurar que la extensión es exactamente la misma
common_range <- range(values(arclim_present), values(pred_present_resampled), na.rm = TRUE)
pred_future_spat <- rast(pred_future)  # Convertir pred_present (RasterLayer) a SpatRaster
pred_future_proj <- project(pred_future_spat, arclim_future, method = "bilinear")  # Reproyectar pred_present para que tenga la misma proyección que arclim_present
pred_future_resampled <- resample(pred_future_proj, arclim_future, method = "bilinear")  # Ajustar resolución y extensión para que coincidan con arclim_present
pred_future_resampled <- extend(pred_future_resampled, arclim_future)  # Asegurar que la extensión es exactamente la misma
common_range_future <- range(values(arclim_future), values(pred_future_resampled), na.rm = TRUE)
# graficar comparacion arclim-dismo 1980-2010 -----------------------------
my_palette <- colorRampPalette(brewer.pal(9, "YlGnBu"))  # Amarillo - Verde - Azul
par(mfcol = c(1,2))
plot(pred_present_resampled,
main = "Probabilidad de ocurrencia \nA. atacamensis DISMO 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_present_mean_arclim, 3)), side = 1, line = 3, cex = 0.8)
plot(arclim_present,
main = "Probabilidad ocurrencia \nA. atacemensis ARCLIM 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_present_mean, 3)), side = 1, line = 3, cex = 0.8)
#writeRaster(difference, "delta.tif", format = "GTiff", overwrite = TRUE)
writeRaster(pred_present_resampled, "pred_dismo_1980-2010_A-atacamensis.tif", format = "GTiff", overwrite = TRUE)  #guardar capa
#writeRaster(difference, "delta.tif", format = "GTiff", overwrite = TRUE)
writeRaster(pred_present_resampled, "pred_dismo_1980-2010_A-atacamensis.tif", overwrite = TRUE)  #guardar capa
#writeRaster(difference, "delta.tif", format = "GTiff", overwrite = TRUE)
writeRaster(pred_present_resampled, "pred_dismo_1980-2010_A-atacamensis.tif", overwrite = TRUE)  #guardar capa
writeRaster(arclim_present, "pred_dismo_1980-2010_A-atacamensis.tif", overwrite = TRUE)  #guardar capa
writeRaster(arclim_present, "pred_arclim_1980-2010_A-atacamensis.tif", overwrite = TRUE)  #guardar capa
writeRaster(pred_future_resampled, "pred_dismo_2035-2065_A-atacamensis.tif", overwrite = TRUE)  #guardar capa
writeRaster(arclim_future, "pred_arclim_2035-2065_A-atacamensis.tif", overwrite = TRUE)  #guardar capa
library(terra)
library(caret)
# visualizar diferencias entre modelos ------------------------------------
diff_future <- pred_future_resampled - arclim_future
diff_present <- pred_present_resampled - arclim_present
# Crear una paleta de colores para resaltar diferencias
diff_palette <- colorRampPalette(c("blue", "white", "red"))  # Azul (-), Blanco (0), Rojo (+)
# Graficar diferencias espaciales
par(mfcol = c(1,2))
writeRaster(diff_present, "dif_1980-2010_A-atacamensis.tif", overwrite = TRUE)  #guardar capa
writeRaster(diff_future, "dif_2035-2065_A-atacamensis.tif", overwrite = TRUE)  #guardar capa
# Obteniendo data de GBIF -------------------------------------------------
especie_info <- name_backbone(name = "Neuontobotrys tarapacana")  #cambiar el nombre por el de la especie de interés
especie_data <- occ_search(taxonKey = especie_info$usageKey,
country = "CL",                    #solo datos de Chile
hasCoordinate = TRUE,              #solo registros con coordenadas
hasGeospatialIssue = FALSE,
limit = 5000)        #sin problemas espaciales
data_ocurrencias <- especie_data$data
# en base a observaciones -------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias %>%
filter(basisOfRecord %in% c("HUMAN_OBSERVATION", "MACHINE_OBSERVATION"))
# Eliminar datos de iNaturalist.org ---------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
filter(publishingOrgKey != "28eb1a3f-1c15-4a95-931a-4af90ecb574d")  #esto es equivalente a references, reemplazar por los códigos que no son fuentes confiables
# en base a observaciones -------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias %>%
filter(basisOfRecord %in% c("HUMAN_OBSERVATION", "MACHINE_OBSERVATION"))
# Precisión espacial adecuada ---------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
filter(coordinateUncertaintyInMeters <= 1000 | is.na(coordinateUncertaintyInMeters))  # Incertidumbre < 1 km
# cautiverio o zoo --------------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
filter(!grepl("zoo|captive|rescue", locality, ignore.case = TRUE))
# calidad taxonómica ------------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
filter(taxonRank == "SPECIES", taxonomicStatus == "ACCEPTED")
# evitar duplicados -------------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
distinct(decimalLongitude, decimalLatitude, year, .keep_all = TRUE)
# 📊 Resultados y visualización -------------------------------------------
print(paste("Registros originales:", nrow(data_ocurrencias)))
print(paste("Registros filtrados:", nrow(data_ocurrencias_filtered)))
# 📌 Mantener solo las columnas de coordenadas ----------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
select(decimalLongitude, decimalLatitude)
# Arreglando datos de entrada ---------------------------------------------
capas_present_raster <- raster::stack(capas_present) # Convertir SpatRaster a RasterStack (para que lo acepte maxent)
capas_future_raster <- raster::stack(capas_future)
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%  # Asegurar que data_ocurrencias_filtered sea un data.frame con solo coordenadas
select(decimalLongitude, decimalLatitude) %>%
as.data.frame()
# 📌 Ejecutar Maxent ------------------------------------------------------
model <- maxent(capas_present_raster, data_ocurrencias_filtered)
par(mfcol = c(1, 2))  # 1 fila, 2 columnas, para graficar
pred_present <- predict(model, capas_present_raster)
pred_future <- predict(model, capas_future_raster)
# Valos promedios de ocurrencia -------------------------------------------
prob_present_mean <- cellStats(pred_present, stat = "mean", na.rm = TRUE)
prob_future_mean <- cellStats(pred_future, stat = "mean", na.rm = TRUE)
# cargar capas de arclim --------------------------------------------------
zip_path <- "data/arclim_neuontobotrys_tarapacana.zip"  #cambiar por la especie correspondiente
files_in_zip <- unzip(zip_path, list = TRUE) # Listar los archivos dentro del ZIP
tif_files <- files_in_zip$Name[grepl("\\.tif$", files_in_zip$Name)] # Filtrar solo los archivos .tif dentro del ZIP
temp_dir <- tempdir()  # Crear un directorio temporal para extraer los archivos
unzip(zip_path, files = tif_files, exdir = temp_dir)  # Extraer los archivos .tif en la carpeta temporal
rasters <- lapply(tif_files, function(file) {  # Cargar los rasters desde la carpeta temporal
rast(file.path(temp_dir, file))
})
names(rasters) <- c("arclim_present", "arclim_future")  # Ajustar los nombres según corresponda
arclim_present <- rasters[[1]] # Extraer los mapas en variables individuales
arclim_future <- rasters[[2]]
# probabilidades ----------------------------------------------------------
prob_present_mean_arclim <- global(arclim_present, "mean", na.rm = TRUE)
prob_future_mean_arclim <- global(arclim_future, "mean", na.rm = TRUE)
pred_present_spat <- rast(pred_present)  # Convertir pred_present (RasterLayer) a SpatRaster
pred_present_proj <- project(pred_present_spat, arclim_present, method = "bilinear")  # Reproyectar pred_present para que tenga la misma proyección que arclim_present
pred_present_resampled <- resample(pred_present_proj, arclim_present, method = "bilinear")  # Ajustar resolución y extensión para que coincidan con arclim_present
pred_present_resampled <- extend(pred_present_resampled, arclim_present)  # Asegurar que la extensión es exactamente la misma
common_range <- range(values(arclim_present), values(pred_present_resampled), na.rm = TRUE)
pred_future_spat <- rast(pred_future)  # Convertir pred_present (RasterLayer) a SpatRaster
pred_future_proj <- project(pred_future_spat, arclim_future, method = "bilinear")  # Reproyectar pred_present para que tenga la misma proyección que arclim_present
pred_future_resampled <- resample(pred_future_proj, arclim_future, method = "bilinear")  # Ajustar resolución y extensión para que coincidan con arclim_present
pred_future_resampled <- extend(pred_future_resampled, arclim_future)  # Asegurar que la extensión es exactamente la misma
common_range_future <- range(values(arclim_future), values(pred_future_resampled), na.rm = TRUE)
# graficar comparacion arclim-dismo 1980-2010 -----------------------------
my_palette <- colorRampPalette(brewer.pal(9, "YlGnBu"))  # Amarillo - Verde - Azul
par(mfcol = c(1,2))
plot(pred_present_resampled,
main = "Probabilidad de ocurrencia \nA. atacamensis DISMO 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_present_mean_arclim, 3)), side = 1, line = 3, cex = 0.8)
plot(arclim_present,
main = "Probabilidad ocurrencia \nA. atacemensis ARCLIM 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_present_mean, 3)), side = 1, line = 3, cex = 0.8)
plot(pred_present_resampled,
main = "Probabilidad de ocurrencia \nN. tarapacana DISMO 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_present_mean_arclim, 3)), side = 1, line = 3, cex = 0.8)
plot(arclim_present,
main = "Probabilidad ocurrencia \nN. tarapacana ARCLIM 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_present_mean, 3)), side = 1, line = 3, cex = 0.8)
#writeRaster(difference, "delta.tif", format = "GTiff", overwrite = TRUE)
writeRaster(pred_present_resampled, "pred_dismo_1980-2010_N-tarapacana.tif", overwrite = TRUE)  #guardar capa
writeRaster(arclim_present, "pred_arclim_1980-2010_N-tarapacana.tif", overwrite = TRUE)  #guardar capa
# grafica comparacion arclim-dismo 2035-2065 ------------------------------
par(mfcol = c(1,2))
plot(pred_future_resampled,
main = "Probabilidad de ocurrencia \nN. taparacana DISMO 2035-2065",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_future_mean_arclim, 3)), side = 1, line = 3, cex = 0.8)
plot(arclim_future,
main = "Probabilidad ocurrencia \nN. tarapacana ARCLIM 2035-2065",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_future_mean, 3)), side = 1, line = 3, cex = 0.8)
writeRaster(pred_future_resampled, "pred_dismo_2035-2065_N-tarapacana.tif", overwrite = TRUE)  #guardar capa
writeRaster(arclim_future, "pred_arclim_2035-2065_N-tarapacana.tif", overwrite = TRUE)  #guardar capa
# visualizar diferencias entre modelos ------------------------------------
diff_future <- pred_future_resampled - arclim_future
diff_present <- pred_present_resampled - arclim_present
# Crear una paleta de colores para resaltar diferencias
diff_palette <- colorRampPalette(c("blue", "white", "red"))  # Azul (-), Blanco (0), Rojo (+)
# Graficar diferencias espaciales
par(mfcol = c(1,2))
plot(diff_present, main = "Diferencia DISMO - ARCLIM \n(1980-2010)",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
cex.main = 0.85,
col = diff_palette(100))
plot(diff_future, main = "Diferencia DISMO - ARCLIM \n(2035-2065)",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
cex.main = 0.85,
col = diff_palette(100))
writeRaster(diff_present, "dif_1980-2010_N-tarapacana.tif", overwrite = TRUE)  #guardar capa
writeRaster(diff_future, "dif_2035-2065_N-tarapacana.tif", overwrite = TRUE)  #guardar capa
View(data_ocurrencias_filtered)
class(data_ocurrencias_filtered)
library(sf)
# Crear un objeto sf
sf_data <- st_as_sf(data_ocurrencias_filtered, coords = c("decimalLongitude", "decimalLatitude"), crs = 4326)  # CRS 4326 = WGS84
# Obteniendo data de GBIF -------------------------------------------------
especie_info <- name_backbone(name = "Adesmia atacamensis")  #cambiar el nombre por el de la especie de interés
especie_data <- occ_search(taxonKey = especie_info$usageKey,
country = "CL",                    #solo datos de Chile
hasCoordinate = TRUE,              #solo registros con coordenadas
hasGeospatialIssue = FALSE,
limit = 5000)        #sin problemas espaciales
data_ocurrencias <- especie_data$data
# en base a observaciones -------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias %>%
filter(basisOfRecord %in% c("HUMAN_OBSERVATION", "MACHINE_OBSERVATION"))
# Precisión espacial adecuada ---------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
filter(coordinateUncertaintyInMeters <= 1000 | is.na(coordinateUncertaintyInMeters))  # Incertidumbre < 1 km
# cautiverio o zoo --------------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
filter(!grepl("zoo|captive|rescue", locality, ignore.case = TRUE))
# calidad taxonómica ------------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
filter(taxonRank == "SPECIES", taxonomicStatus == "ACCEPTED")
# evitar duplicados -------------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
distinct(decimalLongitude, decimalLatitude, year, .keep_all = TRUE)
# 📊 Resultados y visualización -------------------------------------------
print(paste("Registros originales:", nrow(data_ocurrencias)))
print(paste("Registros filtrados:", nrow(data_ocurrencias_filtered)))
glimpse(data_ocurrencias_filtered)
# 📌 Mantener solo las columnas de coordenadas ----------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
select(decimalLongitude, decimalLatitude)
# Arreglando datos de entrada ---------------------------------------------
capas_present_raster <- raster::stack(capas_present) # Convertir SpatRaster a RasterStack (para que lo acepte maxent)
capas_future_raster <- raster::stack(capas_future)
st_write(sf_data, "puntos_qgis.shp", delete_layer = TRUE)
sf_data <- st_as_sf(data_ocurrencias_filtered, coords = c("decimalLongitude", "decimalLatitude"), crs = 4326)
st_write(sf_data, "puntos_adesmia_atacamensis.shp", delete_layer = TRUE)
#writeRaster(difference, "delta.tif", format = "GTiff", overwrite = TRUE)
writeRaster(capas_present_raster, "capas_climas_1980-2010.tif", format = "GTiff", overwrite = TRUE)  #guardar capa
variables <- c("pr_sum")  # Lista de variables climáticas a descargar
# URL base de la API ARClim
url_base <- "https://arclim.mma.gob.cl/api/datos"
# Definir la variable climática que queremos descargar
variable <- "pr_sum"  # Precipitación total
# Construir la URL de la solicitud
url <- paste0(url_base, "/", variable)
# Realizar la solicitud a la API
response <- GET(url)
# Verificar si la solicitud fue exitosa
if (status_code(response) == 200) {
# Convertir la respuesta a formato JSON
datos <- fromJSON(content(response, as = "text"), flatten = TRUE)
# Obtener la URL del archivo GeoTIFF
url_tif <- datos$url  # Ajusta según la estructura de respuesta de la API
# Descargar el archivo GeoTIFF
download.file(url_tif, destfile = "pr_sum.tif", mode = "wb")
# Cargar el raster en R con terra
raster_capa <- rast("pr_sum.tif")
# Mostrar información del raster
print(raster_capa)
} else {
print(paste("Error en la solicitud. Código de estado:", status_code(response)))
}
variables <- c("pr_sum")  # Lista de variables climáticas a descargar
atributos_present <- paste0("$CLIMA$", var, "$annual$present")  # Construir la URL con el nombre de la variable
url_present <- paste0(url_base, "/arclim_raster_5km/geojson/?attributes=", URLencode(atributos_present))
response_present <- GET(url_present)  # Realizar la consulta a la API
if (status_code(response_present) == 200) {  # Verificar si la respuesta fue exitosa
writeRaster(raster_data_present, "capas_pr_sum_1980-2010.tif", format = "GTiff", overwrite = TRUE)  #guardar capa
writeRaster(raster_data_present, "capas_pr_sum_1980-2010.tif", format = "GTiff", overwrite = TRUE)  #guardar capa
library(httr)
library(terra)
library(jsonlite)
# 📌 URL base de la API ARClim
url_base <- "https://arclim.mma.gob.cl/api/datos/arclim_raster_5km"
# Variable climática a descargar
variable <- "pr_sum"  # Precipitación total anual
periodo <- "present"  # Período actual (1980-2010)
# Construir la URL de la API correctamente
url_request <- paste0(url_base, "/geotiff/?attributes=$CLIMA$", variable, "$annual$", periodo)
# Realizar la solicitud a la API
response <- GET(url_request)
# Verificar si la solicitud fue exitosa
if (status_code(response) == 200) {
# Extraer la URL del archivo GeoTIFF desde la respuesta JSON
datos <- fromJSON(content(response, as = "text"), flatten = TRUE)
# Verificar que la respuesta contiene una URL de descarga
if (!is.null(datos$url)) {
# Descargar el archivo GeoTIFF
download.file(datos$url, destfile = "capas_pr_sum_1980-2010.tif", mode = "wb")
# Cargar el raster en R con terra
raster_capa <- rast("capas_pr_sum_1980-2010.tif")
# Mostrar información del raster
print(raster_capa)
} else {
print("Error: No se encontró la URL del archivo GeoTIFF en la respuesta.")
}
} else {
print(paste("Error en la solicitud. Código de estado:", status_code(response)))
}
library(httr)
library(terra)
library(jsonlite)
# 📌 URL base de la API ARClim
url_base <- "https://arclim.mma.gob.cl/api/datos"
# Definir la capa y el formato de salida
capa <- "arclim_raster_5km"  # Capa de resolución 5 km
formato <- "geotiff"  # Formato GeoTIFF
# Definir variable climática y periodo
variable <- "pr_sum"  # Precipitación total
season <- "annual"  # Datos anuales
period <- "present"  # Periodo histórico (1980-2010)
# Construir la URL correcta
url_request <- paste0(url_base, "/", capa, "/", formato, "/?attributes=$CLIMA$", variable, "$", season, "$", period)
# Realizar la consulta
response <- GET(url_request)
# Verificar si la respuesta fue exitosa
if (status_code(response) == 200) {
# Extraer la URL del archivo GeoTIFF desde la respuesta JSON
datos <- fromJSON(content(response, as = "text"), flatten = TRUE)
# Verificar que la respuesta contiene una URL de descarga
if (!is.null(datos$url)) {
# Descargar el archivo GeoTIFF
download.file(datos$url, destfile = "pr_sum_1980-2010.tif", mode = "wb")
# Cargar el raster en R con terra
raster_capa <- rast("pr_sum_1980-2010.tif")
# Mostrar información del raster
print(raster_capa)
} else {
print("Error: No se encontró la URL del archivo GeoTIFF en la respuesta.")
}
} else {
print(paste("Error en la solicitud. Código de estado:", status_code(response)))
}
# 📌 URL base de la API ARClim
url_base <- "https://arclim.mma.gob.cl/api/datos"
# Definir la capa y el formato de salida
capa <- "arclim_raster_5km"  # Capa de resolución 5 km
