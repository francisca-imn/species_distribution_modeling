)
# Definir la extensi√≥n del recorte SOLO EN LATITUD (manteniendo longitud completa)
# FUTURE TIME (2035-2065) -------------------------------------------------
# Transformar los mapas a binario con umbral de 0.1
arclim_binary_future <- arclim_future >= 0.1
pred_binary_future <- pred_future_resampled >= 0.1
# Encontrar los p√≠xeles con valor 1 en cada mapa
arclim_cells_future <- which(arclim_binary_future[] == 1)
pred_cells_future <- which(pred_binary_future[] == 1)
# Obtener coordenadas de los p√≠xeles con valor 1
coords_arclim_future <- xyFromCell(arclim_binary_future, arclim_cells_future)
coords_pred_future <- xyFromCell(pred_binary_future, pred_cells_future)
# Encontrar los extremos NORTE y SUR de CADA MAPA
extremes_arclim_future <- list(
norte = coords_arclim_future[which.max(coords_arclim_future[,2]),],  # Latitud m√°xima
sur = coords_arclim_future[which.min(coords_arclim_future[,2]),]     # Latitud m√≠nima
)
extremes_pred_future <- list(
norte = coords_pred_future[which.max(coords_pred_future[,2]),],  # Latitud m√°xima
sur = coords_pred_future[which.min(coords_pred_future[,2]),]     # Latitud m√≠nima
)
# Seleccionar la coordenada extrema global SOLO EN LATITUD
extreme_global_future <- list(
norte = if (extremes_arclim_future$norte[2] > extremes_pred_future$norte[2]) extremes_arclim_future$norte else extremes_pred_future$norte,
sur = if (extremes_arclim_future$sur[2] < extremes_pred_future$sur[2]) extremes_arclim_future$sur else extremes_pred_future$sur
)
# Definir la extensi√≥n del recorte SOLO EN LATITUD (manteniendo longitud completa)
recorte_extent_future <- ext(
xmin(arclim_binary_future),   # Mantener la longitud completa
xmax(arclim_binary_future),   # Mantener la longitud completa
extreme_global_future$sur[2], # Recortar por la latitud sur
extreme_global_future$norte[2] # Recortar por la latitud norte
)
# Recortar ambos mapas con la nueva extensi√≥n
arclim_recortado_future <- crop(arclim_binary_future, recorte_extent_future)
pred_recortado_future <- crop(pred_binary_future, recorte_extent_future)
# Imprimir resultados
print("Extremos Globales (m√°ximos entre ambos mapas, solo en latitud):")
print(extreme_global_future)
# Visualizaci√≥n de los mapas binarios recortados
plot(pred_recortado_future, main="Mapa Dismo 2035-2065")
plot(arclim_recortado_future, main="Mapa ARClim 2035-2065")
# graficar comparacion arclim-dismo 1980-2010 -----------------------------
my_palette <- colorRampPalette(brewer.pal(9, "YlGnBu"))  # Amarillo - Verde - Azul
par(mfcol = c(1,2))
plot(pred_present_resampled,
main = "Probabilidad de ocurrencia \nA. atacamensis DISMO 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_present_mean_arclim, 3)), side = 1, line = 3, cex = 0.8)
plot(arclim_present,
main = "Probabilidad ocurrencia \nA. atacamensis ARCLIM 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_present_mean, 3)), side = 1, line = 3, cex = 0.8)
# Crear y guardar la imagen en la carpeta "figuras"
png("figuras/comparacion_visual_A-atacamensis.png", width = 1200, height = 600, res = 150)  # Ajustar tama√±o y resoluci√≥n
# Definir la paleta de colores
my_palette <- colorRampPalette(brewer.pal(9, "YlGnBu"))  # Amarillo - Verde - Azul
# Configurar el layout de la figura (2 gr√°ficos lado a lado)
par(mfcol = c(1,2))
# Gr√°fico DISMO
plot(pred_present_resampled,
main = "Probabilidad de ocurrencia \nA. atacamensis DISMO 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_present_mean_arclim, 3)), side = 1, line = 3, cex = 0.8)
# Configurar el layout de la figura (2 gr√°ficos lado a lado)
par(mfcol = c(1,2))
# Gr√°fico DISMO
plot(pred_present_resampled,
main = "Probabilidad de ocurrencia \nA. atacamensis DISMO 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
# Gr√°fico ARCLIM
plot(arclim_present,
main = "Probabilidad ocurrencia \nA. atacamensis ARCLIM 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
# Cerrar el dispositivo gr√°fico
dev.off()
print("Figura guardada en la carpeta 'figuras/comparacion_mapas.png'")
library(RColorBrewer)
my_palette <- colorRampPalette(brewer.pal(9, "YlGnBu"))  # Amarillo - Verde - Azul
par(mfcol = c(1,2))
plot(pred_present_resampled,
main = "Probabilidad de ocurrencia \nA. atacamensis DISMO 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
library(httr)
library(terra)
library(sf)
library(dismo)
library(jsonlite)
# üìå Variables actuales (presente) -------------------------------------------
url_base <- "https://arclim.mma.gob.cl/api/datos"  # URL base de la API ARClim
variables <- c("eto_mean", "pr_sum", "rsds_mean", "tasmin_mean", "tasmax_mean")  # Lista de variables clim√°ticas a descargar
raster_list_present <- list()  # Crear una lista vac√≠a para almacenar los rasters
for (var in variables) {  # Descargar y procesar cada variable clim√°tica
atributos_present <- paste0("$CLIMA$", var, "$annual$present")  # Construir la URL con el nombre de la variable
url_present <- paste0(url_base, "/arclim_raster_5km/geojson/?attributes=", URLencode(atributos_present))
response_present <- GET(url_present)  # Realizar la consulta a la API
if (status_code(response_present) == 200) {  # Verificar si la respuesta fue exitosa
geojson_file_present <- tempfile(fileext = ".geojson")  # Guardar datos descargados como archivo temporal
writeBin(content(response_present, "raw"), geojson_file_present)
vect_data_present <- vect(geojson_file_present)  # Cargar los datos como un objeto SpatVector
raster_data_present <- rast(vect_data_present, resolution = 0.05)  # Crear un raster con la misma resoluci√≥n para todas las capas
raster_data_present <- rasterize(vect_data_present, raster_data_present, field = atributos_present)  # Usa la variable correcta
raster_list_present[[var]] <- raster_data_present
} else {
print(paste("‚ùå Error al descargar", var, "- C√≥digo:", status_code(response_present)))  # ‚úÖ Error corregido
}
}
capas_present <- rast(raster_list_present) # Combinar todas las capas en un solo objeto SpatRaster
print(capas_present)
plot(capas_present)
# üìå Variables futuras (proyecciones) -------------------------------------------
url_base <- "https://arclim.mma.gob.cl/api/datos"  # URL base de la API ARClim
variables <- c("eto_mean", "pr_sum", "rsds_mean", "tasmin_mean", "tasmax_mean")  # Lista de variables clim√°ticas a descargar
raster_list_future <- list()  # Crear una lista vac√≠a para almacenar los rasters
for (var in variables) {  # Descargar y procesar cada variable clim√°tica futura
atributos_future <- paste0("$CLIMA$", var, "$annual$future")
url_future <- paste0(url_base, "/arclim_raster_5km/geojson/?attributes=", URLencode(atributos_future))
response_future <- GET(url_future)  # Realizar la consulta a la API
if (status_code(response_future) == 200) {  # Verificar si la respuesta fue exitosa
geojson_file_future <- tempfile(fileext = ".geojson")  # Guardar datos descargados como archivo temporal
writeBin(content(response_future, "raw"), geojson_file_future)
vect_data_future <- vect(geojson_file_future)  # Cargar los datos como un objeto SpatVector
raster_data_future <- rast(vect_data_future, resolution = 0.05)  # Crear un raster con la misma resoluci√≥n para todas las capas
raster_data_future <- rasterize(vect_data_future, raster_data_future, field = atributos_future)  # Usa la variable correcta
raster_list_future[[var]] <- raster_data_future  # ‚úÖ Guardar raster correctamente en la lista
} else {
print(paste("‚ùå Error al descargar", var, "- C√≥digo:", status_code(response_future)))  # ‚úÖ CORREGIDO: error de sintaxis
}
}
# üìå Combinar todas las capas en un solo objeto SpatRaster ----------------------
capas_future <- rast(raster_list_future)
# üìä Mostrar informaci√≥n del stack futuro
print(capas_future)
plot(capas_future)  # ‚úÖ Graficar correctamente las capas
file.exists("figuras/comparacion_visual_A-atacamensis.png")
install.packages("here")
library(rgbif)
library(tidyverse)
library(httr)
library(rnaturalearth)
library(rnaturalearthdata)
library(rJava)
# Obteniendo data de GBIF -------------------------------------------------
especie_info <- name_backbone(name = "Adesmia atacamensis")  #cambiar el nombre por el de la especie de inter√©s
especie_data <- occ_search(taxonKey = especie_info$usageKey,
country = "CL",                    #solo datos de Chile
hasCoordinate = TRUE,              #solo registros con coordenadas
hasGeospatialIssue = FALSE,
limit = 5000)        #sin problemas espaciales
data_ocurrencias <- especie_data$data
# en base a observaciones -------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias %>%
filter(basisOfRecord %in% c("HUMAN_OBSERVATION", "MACHINE_OBSERVATION"))
# Precisi√≥n espacial adecuada ---------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
filter(coordinateUncertaintyInMeters <= 1000 | is.na(coordinateUncertaintyInMeters))  # Incertidumbre < 1 km
# cautiverio o zoo --------------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
filter(!grepl("zoo|captive|rescue", locality, ignore.case = TRUE))
# calidad taxon√≥mica ------------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
filter(taxonRank == "SPECIES", taxonomicStatus == "ACCEPTED")
# evitar duplicados -------------------------------------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
distinct(decimalLongitude, decimalLatitude, year, .keep_all = TRUE)
# üìä Resultados y visualizaci√≥n -------------------------------------------
print(paste("Registros originales:", nrow(data_ocurrencias)))
print(paste("Registros filtrados:", nrow(data_ocurrencias_filtered)))
# üìå Mantener solo las columnas de coordenadas ----------------------------
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%
select(decimalLongitude, decimalLatitude)
library(sp)
library(dismo)
library(raster)
# Arreglando datos de entrada ---------------------------------------------
capas_present_raster <- raster::stack(capas_present) # Convertir SpatRaster a RasterStack (para que lo acepte maxent)
capas_future_raster <- raster::stack(capas_future)
data_ocurrencias_filtered <- data_ocurrencias_filtered %>%  # Asegurar que data_ocurrencias_filtered sea un data.frame con solo coordenadas
select(decimalLongitude, decimalLatitude) %>%
as.data.frame()
# üìå Ejecutar Maxent ------------------------------------------------------
model <- maxent(capas_present_raster, data_ocurrencias_filtered)
pred_present <- predict(model, capas_present_raster)
pred_future <- predict(model, capas_future_raster)
# Valos promedios de ocurrencia -------------------------------------------
prob_present_mean <- cellStats(pred_present, stat = "mean", na.rm = TRUE)
prob_future_mean <- cellStats(pred_future, stat = "mean", na.rm = TRUE)
library(RColorBrewer)
# cargar capas de arclim --------------------------------------------------
zip_path <- "data/arclim_adesmia_atacamensis.zip"  #cambiar por la especie correspondiente
files_in_zip <- unzip(zip_path, list = TRUE) # Listar los archivos dentro del ZIP
tif_files <- files_in_zip$Name[grepl("\\.tif$", files_in_zip$Name)] # Filtrar solo los archivos .tif dentro del ZIP
temp_dir <- tempdir()  # Crear un directorio temporal para extraer los archivos
unzip(zip_path, files = tif_files, exdir = temp_dir)  # Extraer los archivos .tif en la carpeta temporal
rasters <- lapply(tif_files, function(file) {  # Cargar los rasters desde la carpeta temporal
rast(file.path(temp_dir, file))
})
names(rasters) <- c("arclim_present", "arclim_future")  # Ajustar los nombres seg√∫n corresponda
arclim_present <- rasters[[1]] # Extraer los mapas en variables individuales
arclim_future <- rasters[[2]]
# probabilidades ----------------------------------------------------------
prob_present_mean_arclim <- global(arclim_present, "mean", na.rm = TRUE)
prob_future_mean_arclim <- global(arclim_future, "mean", na.rm = TRUE)
pred_present_spat <- rast(pred_present)  # Convertir pred_present (RasterLayer) a SpatRaster
pred_present_proj <- project(pred_present_spat, arclim_present, method = "bilinear")  # Reproyectar pred_present para que tenga la misma proyecci√≥n que arclim_present
pred_present_resampled <- resample(pred_present_proj, arclim_present, method = "bilinear")  # Ajustar resoluci√≥n y extensi√≥n para que coincidan con arclim_present
pred_present_resampled <- extend(pred_present_resampled, arclim_present)  # Asegurar que la extensi√≥n es exactamente la misma
common_range <- range(values(arclim_present), values(pred_present_resampled), na.rm = TRUE)
pred_future_spat <- rast(pred_future)  # Convertir pred_present (RasterLayer) a SpatRaster
pred_future_proj <- project(pred_future_spat, arclim_future, method = "bilinear")  # Reproyectar pred_present para que tenga la misma proyecci√≥n que arclim_present
pred_future_resampled <- resample(pred_future_proj, arclim_future, method = "bilinear")  # Ajustar resoluci√≥n y extensi√≥n para que coincidan con arclim_present
pred_future_resampled <- extend(pred_future_resampled, arclim_future)  # Asegurar que la extensi√≥n es exactamente la misma
common_range_future <- range(values(arclim_future), values(pred_future_resampled), na.rm = TRUE)
my_palette <- colorRampPalette(brewer.pal(9, "YlGnBu"))  # Amarillo - Verde - Azul
par(mfcol = c(1,2))
plot(pred_present_resampled,
main = "Probabilidad de ocurrencia \nA. atacamensis DISMO 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
plot(arclim_present,
main = "Probabilidad ocurrencia \nA. atacamensis ARCLIM 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
# Cerrar el dispositivo gr√°fico
dev.off()
print("Figura guardada en la carpeta 'figuras/comparacion_mapas.png'")
# grafica comparacion arclim-dismo 2035-2065 ----------------------------------------------
png("figuras/comparacion_visual_future_A-atacamensis.png", width = 1200, height = 600, res = 150)  # Ajustar tama√±o y resoluci√≥n
plot(pred_future_resampled,
main = "Probabilidad de ocurrencia \nA. atacamensis DISMO 2035-2065",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_future_mean_arclim, 3)), side = 1, line = 3, cex = 0.8)
plot(arclim_future,
main = "Probabilidad ocurrencia \nA. atacamensis ARCLIM 2035-2065",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
mtext(paste("Promedio:", round(prob_future_mean, 3)), side = 1, line = 3, cex = 0.8)
dev.off()
# grafica comparacion arclim-dismo 2035-2065 ----------------------------------------------
png("figuras/comparacion_visual_future_A-atacamensis.png", width = 1200, height = 600, res = 150)  # Ajustar tama√±o y resoluci√≥n
my_palette <- colorRampPalette(brewer.pal(9, "YlGnBu"))  # Amarillo - Verde - Azul
par(mfcol = c(1,2))
plot(pred_future_resampled,
main = "Probabilidad de ocurrencia \nA. atacamensis DISMO 2035-2065",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
# grafica comparacion arclim-dismo 2035-2065 ----------------------------------------------
png("figuras/comparacion_visual_future_A-atacamensis.png", width = 1200, height = 600, res = 150)  # Ajustar tama√±o y resoluci√≥n
my_palette <- colorRampPalette(brewer.pal(9, "YlGnBu"))  # Amarillo - Verde - Azul
par(mfcol = c(1,2))
plot(pred_future_resampled,
main = "Probabilidad de ocurrencia \nA. atacamensis DISMO 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
plot(arclim_future,
main = "Probabilidad ocurrencia \nA. atacamensis ARCLIM 1980-2010",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
dev.off()
# grafica comparacion arclim-dismo 2035-2065 ----------------------------------------------
png("figuras/comparacion_visual_future_A-atacamensis.png", width = 1200, height = 600, res = 150)  # Ajustar tama√±o y resoluci√≥n
my_palette <- colorRampPalette(brewer.pal(9, "YlGnBu"))  # Amarillo - Verde - Azul
par(mfcol = c(1,2))
plot(pred_future_resampled,
main = "Probabilidad de ocurrencia \nA. atacamensis DISMO 2035-2065",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
plot(arclim_future,
main = "Probabilidad ocurrencia \nA. atacamensis ARCLIM 2035-2065",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
dev.off()
dev.off()
dev.off()
# grafica comparacion arclim-dismo 2035-2065 ----------------------------------------------
png("reportes/comparacion_visual_future_A-atacamensis.png", width = 1200, height = 600, res = 150)  # Ajustar tama√±o y resoluci√≥n
my_palette <- colorRampPalette(brewer.pal(9, "YlGnBu"))  # Amarillo - Verde - Azul
par(mfcol = c(1,2))
plot(pred_future_resampled,
main = "Probabilidad de ocurrencia \nA. atacamensis DISMO 2035-2065",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
plot(arclim_future,
main = "Probabilidad ocurrencia \nA. atacamensis ARCLIM 2035-2065",
xlim = c(-77, -66), ylim = c(-56, -17), asp=1,
zlim = common_range,
col = my_palette(100),
cex.main = 0.85)
dev.off()
# PRESENT TIME (1980-2010) -------------------------------------------------------------
# Transformar los mapas a binario con umbral de 0.1
arclim_binary <- arclim_present >= 0.1
pred_binary <- pred_present_resampled >= 0.1
# Encontrar los p√≠xeles con valor 1 en cada mapa
arclim_cells <- which(arclim_binary[] == 1)
pred_cells <- which(pred_binary[] == 1)
# Obtener coordenadas de los p√≠xeles con valor 1
coords_arclim <- xyFromCell(arclim_binary, arclim_cells)
coords_pred <- xyFromCell(pred_binary, pred_cells)
# Encontrar los extremos NORTE y SUR de CADA MAPA
extremes_arclim <- list(
norte = coords_arclim[which.max(coords_arclim[,2]),],  # Latitud m√°xima
sur = coords_arclim[which.min(coords_arclim[,2]),]     # Latitud m√≠nima
)
extremes_pred <- list(
norte = coords_pred[which.max(coords_pred[,2]),],  # Latitud m√°xima
sur = coords_pred[which.min(coords_pred[,2]),]     # Latitud m√≠nima
)
# Seleccionar la coordenada extrema global SOLO EN LATITUD
extreme_global <- list(
norte = if (extremes_arclim$norte[2] > extremes_pred$norte[2]) extremes_arclim$norte else extremes_pred$norte,
sur = if (extremes_arclim$sur[2] < extremes_pred$sur[2]) extremes_arclim$sur else extremes_pred$sur
)
# Definir la extensi√≥n del recorte SOLO EN LATITUD
recorte_extent <- ext(
xmin(arclim_binary),   # Mantener la longitud completa
xmax(arclim_binary),   # Mantener la longitud completa
extreme_global$sur[2], # Recortar por la latitud sur
extreme_global$norte[2] # Recortar por la latitud norte
)
# Recortar ambos mapas con la nueva extensi√≥n
arclim_recortado <- crop(arclim_binary, recorte_extent)
pred_recortado <- crop(pred_binary, recorte_extent)
# Imprimir resultados
print("Extremos Globales (m√°ximos entre ambos mapas, solo en latitud):")
print(extreme_global)
print("Archivos .tif generados: arclim_recortado.tif y pred_recortado.tif")
# Visualizaci√≥n de los mapas binarios recortados
plot(pred_recortado, main="Mapa Predicci√≥n 1980-2010")
plot(arclim_recortado, main="Mapa ARClim 1980-2010")
# FUTURE TIME (2035-2065) -------------------------------------------------
# Transformar los mapas a binario con umbral de 0.1
arclim_binary_future <- arclim_future >= 0.1
pred_binary_future <- pred_future_resampled >= 0.1
# Encontrar los p√≠xeles con valor 1 en cada mapa
arclim_cells_future <- which(arclim_binary_future[] == 1)
pred_cells_future <- which(pred_binary_future[] == 1)
# Obtener coordenadas de los p√≠xeles con valor 1
coords_arclim_future <- xyFromCell(arclim_binary_future, arclim_cells_future)
coords_pred_future <- xyFromCell(pred_binary_future, pred_cells_future)
# Encontrar los extremos NORTE y SUR de CADA MAPA
extremes_arclim_future <- list(
norte = coords_arclim_future[which.max(coords_arclim_future[,2]),],  # Latitud m√°xima
sur = coords_arclim_future[which.min(coords_arclim_future[,2]),]     # Latitud m√≠nima
)
extremes_pred_future <- list(
norte = coords_pred_future[which.max(coords_pred_future[,2]),],  # Latitud m√°xima
sur = coords_pred_future[which.min(coords_pred_future[,2]),]     # Latitud m√≠nima
)
# Seleccionar la coordenada extrema global SOLO EN LATITUD
extreme_global_future <- list(
norte = if (extremes_arclim_future$norte[2] > extremes_pred_future$norte[2]) extremes_arclim_future$norte else extremes_pred_future$norte,
sur = if (extremes_arclim_future$sur[2] < extremes_pred_future$sur[2]) extremes_arclim_future$sur else extremes_pred_future$sur
)
# Definir la extensi√≥n del recorte SOLO EN LATITUD (manteniendo longitud completa)
recorte_extent_future <- ext(
xmin(arclim_binary_future),   # Mantener la longitud completa
xmax(arclim_binary_future),   # Mantener la longitud completa
extreme_global_future$sur[2], # Recortar por la latitud sur
extreme_global_future$norte[2] # Recortar por la latitud norte
)
# Recortar ambos mapas con la nueva extensi√≥n
arclim_recortado_future <- crop(arclim_binary_future, recorte_extent_future)
pred_recortado_future <- crop(pred_binary_future, recorte_extent_future)
# Imprimir resultados
print("Extremos Globales (m√°ximos entre ambos mapas, solo en latitud):")
print(extreme_global_future)
# Visualizaci√≥n de los mapas binarios recortados
plot(pred_recortado_future, main="Mapa Dismo 2035-2065")
plot(arclim_recortado_future, main="Mapa ARClim 2035-2065")
# Visualizaci√≥n de los mapas binarios recortados
png("reportes/mapas_binarios_A-atacamensis.png", width = 1200, height = 600, res = 150)  # Ajustar tama√±o y resoluci√≥n
par(mfcol = c(1,2))
plot(pred_recortado, main="Mapa Predicci√≥n 1980-2010")
plot(arclim_recortado, main="Mapa ARClim 1980-2010")
dev.off()
# Visualizaci√≥n de los mapas binarios recortados
png("reportes/mapas_binarios_future_A-atacamensis.png", width = 1200, height = 600, res = 150)  # Ajustar tama√±o y resoluci√≥n
par(mfcol = c(1,2))
plot(pred_recortado_future, main="Mapa Dismo 2035-2065")
plot(arclim_recortado_future, main="Mapa ARClim 2035-2065")
dev.off()
library(caret)
# visualizar diferencias entre modelos --------------------------------------------
diff_future <- pred_recortado_future - arclim_recortado_future
diff_present_recortado <- pred_recortado - arclim_recortado
# Crear una paleta de colores para resaltar diferencias
diff_palette <- colorRampPalette(c("blue", "white", "red"))  # Azul (-), Blanco (0), Rojo (+)
# Graficar diferencias espaciales
par(mfcol = c(1,2))
plot(diff_present_recortado, main = "Diferencia DISMO - ARCLIM \n(1980-2010)",
cex.main = 0.85,
col = diff_palette(100))
plot(diff_future, main = "Diferencia DISMO - ARCLIM \n(2035-2065)",
cex.main = 0.85,
col = diff_palette(100))
# Graficar diferencias espaciales
png("reportes/diff_binarios_A-atacamensis.png", width = 1200, height = 600, res = 150)  # Ajustar tama√±o y resoluci√≥n
par(mfcol = c(1,2))
plot(diff_present_recortado, main = "Diferencia DISMO - ARCLIM \n(1980-2010)",
cex.main = 0.85,
col = diff_palette(100))
plot(diff_future, main = "Diferencia DISMO - ARCLIM \n(2035-2065)",
cex.main = 0.85,
col = diff_palette(100))
dev.off()
# Extraer valores de las capas
values_future_dismo <- values(pred_recortado_future)
values_future_arclim <- values(arclim_recortado_future)
values_present_dismo <- values(pred_recortado)
values_present_arclim <- values(arclim_recortado)
# Calcular correlaciones
cor_future <- cor(values_future_dismo, values_future_arclim, use = "complete.obs")
cor_present <- cor(values_present_dismo, values_present_arclim, use = "complete.obs")
# Mostrar resultados
print(paste("Correlaci√≥n DISMO vs ARCLIM (1980-2010):", round(cor_present, 3)))
print(paste("Correlaci√≥n DISMO vs ARCLIM (2035-2065):", round(cor_future, 3)))
# 2. Convertir los mapas binarizados a vectores
pred_values_future <- values(pred_recortado_future)
arclim_values_future <- values(arclim_recortado_future)
# 3. Remover valores NA para evitar problemas en la comparaci√≥n
valid_indices_future <- !is.na(pred_values_future) & !is.na(arclim_values_future)
pred_values_future <- pred_values_future[valid_indices_future]
arclim_values_future <- arclim_values_future[valid_indices_future]
# 4. Crear la tabla cruzada (Matriz de Confusi√≥n)
confusion_matrix_future <- table(pred_values_future, arclim_values_future)
# Mostrar la matriz de confusi√≥n
print(confusion_matrix_future)
# 5. Calcular el √≠ndice de Kappa usando caret
conf_matrix_future <- confusionMatrix(confusion_matrix_future)
# Mostrar el √≠ndice de Kappa
print(conf_matrix_future$overall["Kappa"])
# Mostrar la matriz de confusi√≥n
print(confusion_matrix_future)
saveRDS(confusion_matrix_future, "reportes/confusion_matrix_future.rds")
# 2. Convertir los mapas binarizados a vectores
pred_values <- values(pred_recortado)
arclim_values <- values(arclim_recortado)
# 3. Remover valores NA para evitar problemas en la comparaci√≥n
valid_indices <- !is.na(pred_values) & !is.na(arclim_values)
pred_values <- pred_values[valid_indices]
arclim_values <- arclim_values[valid_indices]
# 4. Crear la tabla cruzada (Matriz de Confusi√≥n)
confusion_matrix <- table(pred_values, arclim_values)
# Mostrar la matriz de confusi√≥n
print(confusion_matrix)
# 5. Calcular el √≠ndice de Kappa usando caret
conf_matrix <- confusionMatrix(confusion_matrix)
# Mostrar el √≠ndice de Kappa
print(conf_matrix$overall["Kappa"])
# Mostrar la matriz de confusi√≥n
saveRDS(confusion_matrix, "reportes/confusion_matrix_historico.rds")
# Descarga mapas binarios en zonas de inter√©s -----------------------------
writeRaster(pred_recortado, "data/pred_dismo_1980-2010_recortado_A-atacamensis.tif", overwrite = TRUE)  #cambiar nombre especie si corresponde
writeRaster(arclim_recortado, "data/resultados/pred_arclim_1980-2010_recortado_A-atacamensis.tif", overwrite = TRUE)  #cambiar nombre especie si corresponde
writeRaster(pred_recortado_future, "data/resultados/pred_dismo_2035-2065_recortado_A-atacamensis.tif", overwrite = TRUE)  #cambiar nombre especie si corresponde
writeRaster(arclim_recortado_future, "data/resultados/pred_arclim_2035-2065_recortado_A-atacamensis.tif", overwrite = TRUE)  #cambiar nombre especie si corresponde
# Descarga mapa binario diferencia (dismo - arclim) -----------------------
writeRaster(diff_present_recortado, "dif_1980-2010_A-atacamensis.tif", overwrite = TRUE)  #cambiar nombre especie si corresponde
# Descarga mapa binario diferencia (dismo - arclim) -----------------------
writeRaster(diff_present_recortado, "data/resultados/dif_1980-2010_A-atacamensis.tif", overwrite = TRUE)  #cambiar nombre especie si corresponde
writeRaster(diff_future, "data/resutados/dif_2035-2065_A-atacamensis.tif", overwrite = TRUE)  #cambiar nombre especie si corresponde
plot(diff_present_recortado, main = "Diferencia DISMO - ARCLIM \n(1980-2010)",
cex.main = 0.85,
col = diff_palette(100))
plot(diff_future, main = "Diferencia DISMO - ARCLIM \n(2035-2065)",
cex.main = 0.85,
col = diff_palette(100))
writeRaster(diff_future, "data/resutados/dif_2035-2065_A-atacamensis.tif", overwrite = TRUE)  #cambiar nombre especie si corresponde
writeRaster(diff_future, "data/resultados/dif_2035-2065_A-atacamensis.tif", overwrite = TRUE)  #cambiar nombre especie si corresponde
# Descarga SDMs de dismo() ------------------------------------------------
writeRaster(pred_present_resampled, "data/resultados/pred_dismo_1980-2010_A-atacamensis.tif", overwrite = TRUE)  #cambiar nombre especie si corresponde
writeRaster(pred_future_resampled, "data/resultados/pred_dismo_2035-2065_A-atacamensis.tif", overwrite = TRUE)  #cambiar nombre especie si corresponde
